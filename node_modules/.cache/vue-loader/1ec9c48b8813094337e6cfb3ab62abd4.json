{"remainingRequest":"C:\\Users\\sergi\\Desktop\\Desafío - Implementación de Vue Router y uso de rutas\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sergi\\Desktop\\Desafío - Implementación de Vue Router y uso de rutas\\src\\views\\Articulo.vue?vue&type=template&id=054fa195&","dependencies":[{"path":"C:\\Users\\sergi\\Desktop\\Desafío - Implementación de Vue Router y uso de rutas\\src\\views\\Articulo.vue","mtime":1628557395447},{"path":"C:\\Users\\sergi\\Desktop\\Desafío - Implementación de Vue Router y uso de rutas\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sergi\\Desktop\\Desafío - Implementación de Vue Router y uso de rutas\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\sergi\\Desktop\\Desafío - Implementación de Vue Router y uso de rutas\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sergi\\Desktop\\Desafío - Implementación de Vue Router y uso de rutas\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgICA8IS0tIENPTlRFTklETyBQQVJBIExBIFZJU1RBIERFIFBPU1QgLS0+CiAgICA8aGVhZGVyIGNsYXNzPSJtYXN0aGVhZCIgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybCgnL2Fzc2V0cy9pbWcvY2hldnJvbGV0LWJsYXplci5qcGcnKTsiPgogICAgICAgIDxkaXYgY2xhc3M9Im92ZXJsYXkiPjwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTAgY29sLWxnLTggbXgtYXV0byI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdC1oZWFkaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgxPjxzdHJvbmc+Q2hldnJvbGV0IHByZXNlbnRhIGxhIHRvdGFsbWVudGUgbnVldmEgQmxhemVyPC9zdHJvbmc+PC9oMT4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJzdWJoZWFkaW5nIj48c3Ryb25nPkxsZWdhIGNvbW8gbGEgcHJpbWVyYSBTVVYgZGVwb3J0aXZhIGRlIGxhIG1hcmNhPC9zdHJvbmc+PC9oMj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvaGVhZGVyPgogICAgPGFydGljbGU+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMCBjb2wtbGctOCBteC1hdXRvIj4KICAgICAgICAgICAgICAgICAgICA8cD5MYSBtYXJjYSBkZWwgY29yYmF0w61uIGhhIGVzdGFkbyBtdXkgYWN0aXZhIGRlIG5vdmVkYWRlcyBlc3RlIDIwMTksIHkgYWNhYmEgZGUgcHJlc2VudGFyIGVuIENoaWxlIHN1IHByaW1lciBTVVYgZGVwb3J0aXZvLCBxdWUgcmVjb2JyYSB1biBjb25vY2lkbyBub21icmUgZGUgbGEgbWFyY2EsIGxhIEJsYXplciwgcXVlIGFob3JhIGxsZWdhIGNvbiBtdWNoYSBtw6FzIGNlcmNhbsOtYSBhbCBkaXNlw7FvIHkgY29uY2VwdG8KICAgICAgICAgICAgICAgICAgICAgICAgZGVsIENhbWFybyBxdWUgZWwgZGVsIHRvZG8gdGVycmVubyBydWRvIHF1ZSBmdWUgaGFjZSBhw7FvcyBhdHLDoXMuPC9wPgogICAgICAgICAgICAgICAgICAgIDxwPkF0ZXJyaXphIGVuIG51ZXN0cm8gcGHDrXMgZW4gZG9zIHZlcnNpb25lcywgYW1iYXMgbXV5IGVxdWlwYWRhcyB5IHF1ZSBzb2xhbWVudGUgdmFyw61hbiBlbiBzdSBsb29rLCBvIG3DoXMgZGVwb3J0aXZvIG8gbcOhcyBlbGVnYW50ZS4mbmJzcDtMYSBwcmltZXJhIGVzIGxhIFJTLCBxdWUgb2ZyZWNlIGRldGFsbGVzIGRlcG9ydGl2b3MgZW4gbmVncm8gYnJpbGxhbnRlLCBpbmNsdXllbmRvIGVsIHRyYWRpY2lvbmFsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmJhdMOtbiwgbWllbnRyYXMgcXVlIGxhIHZlcnNpw7NuIFByZW1pZXIgb2ZyZWNlIHVuIGxvb2sgbcOhcyBlbGVnYW50ZSwgY29uIG11Y2hvcyBkZXRhbGxlcyBjcm9tYWRvcyB5IHF1ZSByZWN1ZXJkYSBtw6FzIGEgb3Ryb3MgbW9kZWxvcyBkZSBsYSBtYXJjYS4gQW1iYXMgc2Ugb2ZyZWNlbiBhIHVuIHByZWNpbyBkZSBsYW56YW1pZW50byBkZSAkMjkuOTkwLjAwMCwgaW5jbHV5ZW5kbyBib25vcyBkZQogICAgICAgICAgICAgICAgICAgICAgICBsYW56YW1pZW50byB5IGRlIGZpbmFuY2lhbWllbnRvIChwcmVjaW8gc2luIGJvbm9zIGVzICQzMS45OTAuMDAwKS48L3A+CiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJzZWN0aW9uLWhlYWRpbmciPjxzdHJvbmc+RElTRcORTyBERVBPUlRJVk88L3N0cm9uZz48L2gyPgogICAgICAgICAgICAgICAgICAgIDxwPkxvIHByaW1lcm8gcXVlIHNlIGFwcmVjaWEgZXMgc3UgZGlzZcOxbyBleHRlcmlvciwgcXVlIGF1bnF1ZSBlbiB1biB0YW1hw7FvIG5vIG1lbm9yIGRlIGNhc2kgNC45IG1ldHJvcywgc2UgdmUgYmFzdGFudGUgYXRyYWN0aXZvIHkgZWxlZ2FudGUsIGNvbiB1biBmcm9udGFsIG11eSBhZmlsYWRvLCBjb24gdW5hIGJvY2EgbXV5IGdyYW5kZSwgbHVjZXMgZGl1cm5hcyBMRUQgc3VwZXJpb3JlcyB5IHByaW5jaXBhbGVzCiAgICAgICAgICAgICAgICAgICAgICAgIGFiYWpvIEhJRCBjb24gdGVjbm9sb2fDrWEgSW50ZWxsaWJlYW0uIEVsIGxhdGVyYWwgc2UgdmUgbXV5IGVzdGlsaXphZG8sIGNvbiBzdXMgbGxhbnRhcyBkZSAyMSBwdWxnYWRhcywgeSB1bmEgcGFydGUgdHJhc2VyYSBxdWUgcmVjdWVyZGEgYSBvdHJvcyBtb2RlbG9zIGVtYmxlbcOhdGljb3MgZGVsIHNlZ21lbnRvLCBjb21vIGxhIE5pc3NhbiBNdXJhbm8gbyBMZXh1cyBSWC4gTGEgdHJhc2VyYSBvZnJlY2UKICAgICAgICAgICAgICAgICAgICAgICAgdW4gcG9ydGFsw7NuIGNvbiB1bmEgYnVlbmEgY2HDrWRhLCBkb2JsZSBzYWxpZGEgZGUgZXNjYXBlIHkgaGVybW9zYXMgbHVjZXMgTEVEIGNvbiB1biBtaW5pIGxvZ28gZGUgbGEgbWFyY2EuPC9wPgogICAgICAgICAgICAgICAgICAgIDxwPkVsIGludGVyaW9yIGVzIGRvbmRlIG3DoXMgc2UgYXNlbWVqYSBhIHN1IGhlcm1hbm8gZGVwb3J0aXZvIENhbWFybywgY29uIHVuIHRhYmxlcm8gZGVwb3J0aXZvIHkgcmVhbG1lbnRlIG11eSBlcXVpcGFkbywgY29uIGRldGFsbGVzIGNvbW8gbGFzIHNhbGlkYXMgZGUgYWlyZSBjaXJjdWxhcmVzLCBwYW50YWxsYSBjZW50cmFsIGVuIHRhYmxlcm8gZGUgaW5zdHJ1bWVudG9zLCZuYnNwO3ZvbGFudGUgZGVwb3J0aXZvLAogICAgICAgICAgICAgICAgICAgICAgICBzaXN0ZW1hIG11bHRpbWVkaWEgY29uIE15TGluayBjb24gQW5kcm9pZCBBdXRvIHkgQXBwbGUgQ2FycGxheSwgY2FyZ2Fkb3IgaW5oYWzDoW1icmljbywgbWllbnRyYXMgcXVlIHNlZ8O6biBzdSB2ZXJzacOzbiwgbG9zIGFzaWVudG9zIGVzdMOhbiB0YXBpemFkb3MgZW4gY3Vlcm8gbmVncm8gcGVyZm9yYWRvIGVuIGxhIHZlcnNpw7NuIFByZW1pZXIgbWllbnRyYXMgcXVlIGVuIGxhIHZlcnNpw7NuIFJTIGVsCiAgICAgICAgICAgICAgICAgICAgICAgIHRhcGl6IGNvbiBpbnNlcmNpb25lcyBkZSBtaWNybyBmaWJyYSBnYW11emFkYSB5IGRldGFsbGVzIHJvam9zIGVuIHRvZG8gZWwgaW50ZXJpb3IuPC9wPgogICAgICAgICAgICAgICAgICAgIDxibG9ja3F1b3RlIGNsYXNzPSJibG9ja3F1b3RlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTAiPjwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Jsb2NrcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHA+U3UgZXF1aXBhbWllbnRvIGRlIHNlZ3VyaWRhZCBlcyByZWFsbWVudGUgY29tcGxldG8sIG9mcmVjaWVuZG8gZGVzZGUgbG9zIHNpZXRlIGFpcmJhZ3MsIGNvbnRyb2wgZGUgZXN0YWJpbGlkYWQsIGZyZW5vcyBkZSBkaXNjbyBlbiBsYXMgY3VhdHJvIHJ1ZWRhcywgY29udHJvbCBjcnVjZXJvIGFkYXB0YXRpdm8sIGFsZXJ0YSBkZSBjYW1iaW8gZGUgY2FycmlsLCBhbGVydGEgZGUgdHLDoWZpY28gY3J1emFkbywKICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRhIGRlIGNvbGlzacOzbiBmcm9udGFsLCBhc2lzdGVudGUgZGUgZnJlbmFkbyBhIGJhamFzIHZlbG9jaWRhZGVzLCBhbGVydGEgZW4gZWwgYXNpZW50byBkZWwgY29uZHVjdG9yLCBhc2lzdGVudGUgYWN0aXZvIGRlIGVzdGFjaW9uYW1pZW50byB5IGPDoW1hcmEgZGUgMzYwwrAuPC9wPgogICAgICAgICAgICAgICAgICAgIDxwPkVsIG1vdG9yIGRlIGFtYmFzIHZlcnNpb25lcyBlcyB1biBWNiBkZSAzLjYgbGl0cm9zIHF1ZSBlbnRyZWdhIHVuYSBwb3RlbmNpYSBkZSAzMDggSHAgeSAzNjUgTm0sIHF1ZSBzZSBhY29wbGEgYSB1bmEgY2FqYSBhdXRvbcOhdGljYSBkZSBudWV2ZSB2ZWxvY2lkYWRlcywgdHJhbnNtaXRpZW5kbyBhbCBzdWVsbyBlc3RhIHBvdGVuY2lhIGdyYWNpYXMgYSB1biBzaXN0ZW1hIEFXRCBjb24gZGlmZXJlbnRlcwogICAgICAgICAgICAgICAgICAgICAgICBtb2RvcyBkZSBtYW5lam8uIFBhcmEgbWVqb3JhciBhbGdvIGxhIGVmaWNpZW5jaWEsIGludGVncmEgdW4gc2lzdGVtYSBkZSBlbmNlbmRpZG8geSBhcGFnYWRvIGRlIG1vdG9yIGF1dG9tw6F0aWNvIFN0YXJ0JmFtcDtTdG9wLjwvcD48YSBocmVmPSIjIj48L2E+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9hcnRpY2xlPgogICAgPGZvb3Rlcj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEwIGNvbC1sZy04IG14LWF1dG8iPgogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC1pbmxpbmUgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPjxzcGFuIGNsYXNzPSJmYS1zdGFjayBmYS1sZyI+PGkgY2xhc3M9ImZhIGZhLWNpcmNsZSBmYS1zdGFjay0yeCI+PC9pPjxpIGNsYXNzPSJmYSBmYS10d2l0dGVyIGZhLXN0YWNrLTF4IGZhLWludmVyc2UiPjwvaT48L3NwYW4+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj48c3BhbiBjbGFzcz0iZmEtc3RhY2sgZmEtbGciPjxpIGNsYXNzPSJmYSBmYS1jaXJjbGUgZmEtc3RhY2stMngiPjwvaT48aSBjbGFzcz0iZmEgZmEtZmFjZWJvb2sgZmEtc3RhY2stMXggZmEtaW52ZXJzZSI+PC9pPjwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPjxzcGFuIGNsYXNzPSJmYS1zdGFjayBmYS1sZyI+PGkgY2xhc3M9ImZhIGZhLWNpcmNsZSBmYS1zdGFjay0yeCI+PC9pPjxpIGNsYXNzPSJmYSBmYS1naXRodWIgZmEtc3RhY2stMXggZmEtaW52ZXJzZSI+PC9pPjwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtbXV0ZWQgY29weXJpZ2h0Ij5Db3B5cmlnaHQmbmJzcDvCqSZuYnNwO1Y4IC0gMjAxODwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZm9vdGVyPgo8L2Rpdj4K"},null]}